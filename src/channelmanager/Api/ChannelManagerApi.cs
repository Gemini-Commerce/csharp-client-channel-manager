/*
 * Channel Manager Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using channelmanager.Client;
using channelmanager.Client.Auth;
using channelmanager.Model;

namespace channelmanager.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelManagerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateAssociation
        /// </summary>
        /// <remarks>
        /// Create a new association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerAssociationResponse</returns>
        ChannelmanagerAssociationResponse ChannelManagerCreateAssociation(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0);

        /// <summary>
        /// CreateAssociation
        /// </summary>
        /// <remarks>
        /// Create a new association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerAssociationResponse</returns>
        ApiResponse<ChannelmanagerAssociationResponse> ChannelManagerCreateAssociationWithHttpInfo(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0);
        /// <summary>
        /// CreateChannel
        /// </summary>
        /// <remarks>
        /// Create a new channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponse</returns>
        ChannelmanagerChannelResponse ChannelManagerCreateChannel(ChannelmanagerCreateChannelRequest body, int operationIndex = 0);

        /// <summary>
        /// CreateChannel
        /// </summary>
        /// <remarks>
        /// Create a new channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponse</returns>
        ApiResponse<ChannelmanagerChannelResponse> ChannelManagerCreateChannelWithHttpInfo(ChannelmanagerCreateChannelRequest body, int operationIndex = 0);
        /// <summary>
        /// CreateMarket
        /// </summary>
        /// <remarks>
        /// Create a new market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponse</returns>
        ChannelmanagerMarketResponse ChannelManagerCreateMarket(ChannelmanagerCreateMarketRequest body, int operationIndex = 0);

        /// <summary>
        /// CreateMarket
        /// </summary>
        /// <remarks>
        /// Create a new market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponse</returns>
        ApiResponse<ChannelmanagerMarketResponse> ChannelManagerCreateMarketWithHttpInfo(ChannelmanagerCreateMarketRequest body, int operationIndex = 0);
        /// <summary>
        /// DeleteAssociation
        /// </summary>
        /// <remarks>
        /// Delete an existing association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ChannelManagerDeleteAssociation(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0);

        /// <summary>
        /// DeleteAssociation
        /// </summary>
        /// <remarks>
        /// Delete an existing association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ChannelManagerDeleteAssociationWithHttpInfo(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0);
        /// <summary>
        /// DeleteChannel
        /// </summary>
        /// <remarks>
        /// Soft delete an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ChannelManagerDeleteChannel(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0);

        /// <summary>
        /// DeleteChannel
        /// </summary>
        /// <remarks>
        /// Soft delete an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ChannelManagerDeleteChannelWithHttpInfo(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0);
        /// <summary>
        /// DeleteMarket
        /// </summary>
        /// <remarks>
        /// Soft delete an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ChannelManagerDeleteMarket(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0);

        /// <summary>
        /// DeleteMarket
        /// </summary>
        /// <remarks>
        /// Soft delete an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ChannelManagerDeleteMarketWithHttpInfo(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0);
        /// <summary>
        /// GetChannel
        /// </summary>
        /// <remarks>
        /// Get an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponse</returns>
        ChannelmanagerChannelResponse ChannelManagerGetChannel(ChannelmanagerGetChannelRequest body, int operationIndex = 0);

        /// <summary>
        /// GetChannel
        /// </summary>
        /// <remarks>
        /// Get an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponse</returns>
        ApiResponse<ChannelmanagerChannelResponse> ChannelManagerGetChannelWithHttpInfo(ChannelmanagerGetChannelRequest body, int operationIndex = 0);
        /// <summary>
        /// GetChannelWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing channel with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponseWithAssociations</returns>
        ChannelmanagerChannelResponseWithAssociations ChannelManagerGetChannelWithAssociations(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0);

        /// <summary>
        /// GetChannelWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing channel with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponseWithAssociations</returns>
        ApiResponse<ChannelmanagerChannelResponseWithAssociations> ChannelManagerGetChannelWithAssociationsWithHttpInfo(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0);
        /// <summary>
        /// GetMarket
        /// </summary>
        /// <remarks>
        /// Get an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponse</returns>
        ChannelmanagerMarketResponse ChannelManagerGetMarket(ChannelmanagerGetMarketRequest body, int operationIndex = 0);

        /// <summary>
        /// GetMarket
        /// </summary>
        /// <remarks>
        /// Get an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponse</returns>
        ApiResponse<ChannelmanagerMarketResponse> ChannelManagerGetMarketWithHttpInfo(ChannelmanagerGetMarketRequest body, int operationIndex = 0);
        /// <summary>
        /// GetMarketWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing market with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponseWithAssociations</returns>
        ChannelmanagerMarketResponseWithAssociations ChannelManagerGetMarketWithAssociations(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0);

        /// <summary>
        /// GetMarketWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing market with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponseWithAssociations</returns>
        ApiResponse<ChannelmanagerMarketResponseWithAssociations> ChannelManagerGetMarketWithAssociationsWithHttpInfo(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0);
        /// <summary>
        /// ListChannels
        /// </summary>
        /// <remarks>
        /// List all channels
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListChannelsResponse</returns>
        ChannelmanagerListChannelsResponse ChannelManagerListChannels(ChannelmanagerListChannelsRequest body, int operationIndex = 0);

        /// <summary>
        /// ListChannels
        /// </summary>
        /// <remarks>
        /// List all channels
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListChannelsResponse</returns>
        ApiResponse<ChannelmanagerListChannelsResponse> ChannelManagerListChannelsWithHttpInfo(ChannelmanagerListChannelsRequest body, int operationIndex = 0);
        /// <summary>
        /// ListChannelsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all channels with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListChannelsWithAssociationsResponse</returns>
        ChannelmanagerListChannelsWithAssociationsResponse ChannelManagerListChannelsWithAssociations(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0);

        /// <summary>
        /// ListChannelsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all channels with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListChannelsWithAssociationsResponse</returns>
        ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse> ChannelManagerListChannelsWithAssociationsWithHttpInfo(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0);
        /// <summary>
        /// ListMarkets
        /// </summary>
        /// <remarks>
        /// List all markets
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListMarketsResponse</returns>
        ChannelmanagerListMarketsResponse ChannelManagerListMarkets(ChannelmanagerListMarketsRequest body, int operationIndex = 0);

        /// <summary>
        /// ListMarkets
        /// </summary>
        /// <remarks>
        /// List all markets
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListMarketsResponse</returns>
        ApiResponse<ChannelmanagerListMarketsResponse> ChannelManagerListMarketsWithHttpInfo(ChannelmanagerListMarketsRequest body, int operationIndex = 0);
        /// <summary>
        /// ListMarketsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all markets with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListMarketsWithAssociationsResponse</returns>
        ChannelmanagerListMarketsWithAssociationsResponse ChannelManagerListMarketsWithAssociations(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0);

        /// <summary>
        /// ListMarketsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all markets with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListMarketsWithAssociationsResponse</returns>
        ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse> ChannelManagerListMarketsWithAssociationsWithHttpInfo(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0);
        /// <summary>
        /// UpdateChannel
        /// </summary>
        /// <remarks>
        /// Update an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponse</returns>
        ChannelmanagerChannelResponse ChannelManagerUpdateChannel(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0);

        /// <summary>
        /// UpdateChannel
        /// </summary>
        /// <remarks>
        /// Update an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponse</returns>
        ApiResponse<ChannelmanagerChannelResponse> ChannelManagerUpdateChannelWithHttpInfo(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0);
        /// <summary>
        /// UpdateMarket
        /// </summary>
        /// <remarks>
        /// Update an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponse</returns>
        ChannelmanagerMarketResponse ChannelManagerUpdateMarket(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0);

        /// <summary>
        /// UpdateMarket
        /// </summary>
        /// <remarks>
        /// Update an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponse</returns>
        ApiResponse<ChannelmanagerMarketResponse> ChannelManagerUpdateMarketWithHttpInfo(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelManagerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// CreateAssociation
        /// </summary>
        /// <remarks>
        /// Create a new association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerAssociationResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerAssociationResponse> ChannelManagerCreateAssociationAsync(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateAssociation
        /// </summary>
        /// <remarks>
        /// Create a new association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerAssociationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerAssociationResponse>> ChannelManagerCreateAssociationWithHttpInfoAsync(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// CreateChannel
        /// </summary>
        /// <remarks>
        /// Create a new channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerChannelResponse> ChannelManagerCreateChannelAsync(ChannelmanagerCreateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateChannel
        /// </summary>
        /// <remarks>
        /// Create a new channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerChannelResponse>> ChannelManagerCreateChannelWithHttpInfoAsync(ChannelmanagerCreateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// CreateMarket
        /// </summary>
        /// <remarks>
        /// Create a new market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerMarketResponse> ChannelManagerCreateMarketAsync(ChannelmanagerCreateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateMarket
        /// </summary>
        /// <remarks>
        /// Create a new market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerMarketResponse>> ChannelManagerCreateMarketWithHttpInfoAsync(ChannelmanagerCreateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteAssociation
        /// </summary>
        /// <remarks>
        /// Delete an existing association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ChannelManagerDeleteAssociationAsync(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteAssociation
        /// </summary>
        /// <remarks>
        /// Delete an existing association between a channel and a market or entities
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChannelManagerDeleteAssociationWithHttpInfoAsync(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteChannel
        /// </summary>
        /// <remarks>
        /// Soft delete an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ChannelManagerDeleteChannelAsync(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteChannel
        /// </summary>
        /// <remarks>
        /// Soft delete an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChannelManagerDeleteChannelWithHttpInfoAsync(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteMarket
        /// </summary>
        /// <remarks>
        /// Soft delete an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ChannelManagerDeleteMarketAsync(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteMarket
        /// </summary>
        /// <remarks>
        /// Soft delete an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChannelManagerDeleteMarketWithHttpInfoAsync(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetChannel
        /// </summary>
        /// <remarks>
        /// Get an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerChannelResponse> ChannelManagerGetChannelAsync(ChannelmanagerGetChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetChannel
        /// </summary>
        /// <remarks>
        /// Get an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerChannelResponse>> ChannelManagerGetChannelWithHttpInfoAsync(ChannelmanagerGetChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetChannelWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing channel with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponseWithAssociations</returns>
        System.Threading.Tasks.Task<ChannelmanagerChannelResponseWithAssociations> ChannelManagerGetChannelWithAssociationsAsync(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetChannelWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing channel with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponseWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerChannelResponseWithAssociations>> ChannelManagerGetChannelWithAssociationsWithHttpInfoAsync(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetMarket
        /// </summary>
        /// <remarks>
        /// Get an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerMarketResponse> ChannelManagerGetMarketAsync(ChannelmanagerGetMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetMarket
        /// </summary>
        /// <remarks>
        /// Get an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerMarketResponse>> ChannelManagerGetMarketWithHttpInfoAsync(ChannelmanagerGetMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetMarketWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing market with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponseWithAssociations</returns>
        System.Threading.Tasks.Task<ChannelmanagerMarketResponseWithAssociations> ChannelManagerGetMarketWithAssociationsAsync(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetMarketWithAssociations
        /// </summary>
        /// <remarks>
        /// Get an existing market with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponseWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerMarketResponseWithAssociations>> ChannelManagerGetMarketWithAssociationsWithHttpInfoAsync(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListChannels
        /// </summary>
        /// <remarks>
        /// List all channels
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListChannelsResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerListChannelsResponse> ChannelManagerListChannelsAsync(ChannelmanagerListChannelsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListChannels
        /// </summary>
        /// <remarks>
        /// List all channels
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListChannelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerListChannelsResponse>> ChannelManagerListChannelsWithHttpInfoAsync(ChannelmanagerListChannelsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListChannelsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all channels with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListChannelsWithAssociationsResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerListChannelsWithAssociationsResponse> ChannelManagerListChannelsWithAssociationsAsync(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListChannelsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all channels with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListChannelsWithAssociationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse>> ChannelManagerListChannelsWithAssociationsWithHttpInfoAsync(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMarkets
        /// </summary>
        /// <remarks>
        /// List all markets
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListMarketsResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerListMarketsResponse> ChannelManagerListMarketsAsync(ChannelmanagerListMarketsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMarkets
        /// </summary>
        /// <remarks>
        /// List all markets
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListMarketsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerListMarketsResponse>> ChannelManagerListMarketsWithHttpInfoAsync(ChannelmanagerListMarketsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMarketsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all markets with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListMarketsWithAssociationsResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerListMarketsWithAssociationsResponse> ChannelManagerListMarketsWithAssociationsAsync(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMarketsWithAssociations
        /// </summary>
        /// <remarks>
        /// List all markets with associations
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListMarketsWithAssociationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse>> ChannelManagerListMarketsWithAssociationsWithHttpInfoAsync(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UpdateChannel
        /// </summary>
        /// <remarks>
        /// Update an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerChannelResponse> ChannelManagerUpdateChannelAsync(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UpdateChannel
        /// </summary>
        /// <remarks>
        /// Update an existing channel
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerChannelResponse>> ChannelManagerUpdateChannelWithHttpInfoAsync(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UpdateMarket
        /// </summary>
        /// <remarks>
        /// Update an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponse</returns>
        System.Threading.Tasks.Task<ChannelmanagerMarketResponse> ChannelManagerUpdateMarketAsync(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UpdateMarket
        /// </summary>
        /// <remarks>
        /// Update an existing market
        /// </remarks>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelmanagerMarketResponse>> ChannelManagerUpdateMarketWithHttpInfoAsync(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelManagerApi : IChannelManagerApiSync, IChannelManagerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelManagerApi : IChannelManagerApi
    {
        private channelmanager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelManagerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelManagerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelManagerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelManagerApi(string basePath)
        {
            this.Configuration = channelmanager.Client.Configuration.MergeConfigurations(
                channelmanager.Client.GlobalConfiguration.Instance,
                new channelmanager.Client.Configuration { BasePath = basePath }
            );
            this.Client = new channelmanager.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new channelmanager.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = channelmanager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelManagerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelManagerApi(channelmanager.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = channelmanager.Client.Configuration.MergeConfigurations(
                channelmanager.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new channelmanager.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new channelmanager.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = channelmanager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelManagerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelManagerApi(channelmanager.Client.ISynchronousClient client, channelmanager.Client.IAsynchronousClient asyncClient, channelmanager.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = channelmanager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public channelmanager.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public channelmanager.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public channelmanager.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public channelmanager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// CreateAssociation Create a new association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerAssociationResponse</returns>
        public ChannelmanagerAssociationResponse ChannelManagerCreateAssociation(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerAssociationResponse> localVarResponse = ChannelManagerCreateAssociationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateAssociation Create a new association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerAssociationResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerAssociationResponse> ChannelManagerCreateAssociationWithHttpInfo(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerCreateAssociation");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerCreateAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerAssociationResponse>("/channelmanager.ChannelManager/CreateAssociation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerCreateAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateAssociation Create a new association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerAssociationResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerAssociationResponse> ChannelManagerCreateAssociationAsync(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerAssociationResponse> localVarResponse = await ChannelManagerCreateAssociationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateAssociation Create a new association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerAssociationResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerAssociationResponse>> ChannelManagerCreateAssociationWithHttpInfoAsync(ChannelmanagerCreateAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerCreateAssociation");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerCreateAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerAssociationResponse>("/channelmanager.ChannelManager/CreateAssociation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerCreateAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateChannel Create a new channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponse</returns>
        public ChannelmanagerChannelResponse ChannelManagerCreateChannel(ChannelmanagerCreateChannelRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> localVarResponse = ChannelManagerCreateChannelWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateChannel Create a new channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> ChannelManagerCreateChannelWithHttpInfo(ChannelmanagerCreateChannelRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerCreateChannel");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerCreateChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerChannelResponse>("/channelmanager.ChannelManager/CreateChannel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerCreateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateChannel Create a new channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerChannelResponse> ChannelManagerCreateChannelAsync(ChannelmanagerCreateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> localVarResponse = await ChannelManagerCreateChannelWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateChannel Create a new channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse>> ChannelManagerCreateChannelWithHttpInfoAsync(ChannelmanagerCreateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerCreateChannel");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerCreateChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerChannelResponse>("/channelmanager.ChannelManager/CreateChannel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerCreateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateMarket Create a new market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponse</returns>
        public ChannelmanagerMarketResponse ChannelManagerCreateMarket(ChannelmanagerCreateMarketRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> localVarResponse = ChannelManagerCreateMarketWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateMarket Create a new market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> ChannelManagerCreateMarketWithHttpInfo(ChannelmanagerCreateMarketRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerCreateMarket");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerCreateMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerMarketResponse>("/channelmanager.ChannelManager/CreateMarket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerCreateMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateMarket Create a new market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerMarketResponse> ChannelManagerCreateMarketAsync(ChannelmanagerCreateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> localVarResponse = await ChannelManagerCreateMarketWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateMarket Create a new market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse>> ChannelManagerCreateMarketWithHttpInfoAsync(ChannelmanagerCreateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerCreateMarket");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerCreateMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerMarketResponse>("/channelmanager.ChannelManager/CreateMarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerCreateMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteAssociation Delete an existing association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ChannelManagerDeleteAssociation(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<Object> localVarResponse = ChannelManagerDeleteAssociationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteAssociation Delete an existing association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public channelmanager.Client.ApiResponse<Object> ChannelManagerDeleteAssociationWithHttpInfo(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerDeleteAssociation");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerDeleteAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channelmanager.ChannelManager/DeleteAssociation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerDeleteAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteAssociation Delete an existing association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ChannelManagerDeleteAssociationAsync(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<Object> localVarResponse = await ChannelManagerDeleteAssociationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteAssociation Delete an existing association between a channel and a market or entities
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<Object>> ChannelManagerDeleteAssociationWithHttpInfoAsync(ChannelmanagerDeleteAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerDeleteAssociation");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerDeleteAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channelmanager.ChannelManager/DeleteAssociation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerDeleteAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteChannel Soft delete an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ChannelManagerDeleteChannel(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<Object> localVarResponse = ChannelManagerDeleteChannelWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteChannel Soft delete an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public channelmanager.Client.ApiResponse<Object> ChannelManagerDeleteChannelWithHttpInfo(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerDeleteChannel");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerDeleteChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channelmanager.ChannelManager/DeleteChannel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerDeleteChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteChannel Soft delete an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ChannelManagerDeleteChannelAsync(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<Object> localVarResponse = await ChannelManagerDeleteChannelWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteChannel Soft delete an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<Object>> ChannelManagerDeleteChannelWithHttpInfoAsync(ChannelmanagerDeleteChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerDeleteChannel");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerDeleteChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channelmanager.ChannelManager/DeleteChannel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerDeleteChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMarket Soft delete an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ChannelManagerDeleteMarket(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<Object> localVarResponse = ChannelManagerDeleteMarketWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMarket Soft delete an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public channelmanager.Client.ApiResponse<Object> ChannelManagerDeleteMarketWithHttpInfo(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerDeleteMarket");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerDeleteMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channelmanager.ChannelManager/DeleteMarket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerDeleteMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMarket Soft delete an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ChannelManagerDeleteMarketAsync(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<Object> localVarResponse = await ChannelManagerDeleteMarketWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMarket Soft delete an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<Object>> ChannelManagerDeleteMarketWithHttpInfoAsync(ChannelmanagerDeleteMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerDeleteMarket");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerDeleteMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channelmanager.ChannelManager/DeleteMarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerDeleteMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetChannel Get an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponse</returns>
        public ChannelmanagerChannelResponse ChannelManagerGetChannel(ChannelmanagerGetChannelRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> localVarResponse = ChannelManagerGetChannelWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetChannel Get an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> ChannelManagerGetChannelWithHttpInfo(ChannelmanagerGetChannelRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetChannel");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerChannelResponse>("/channelmanager.ChannelManager/GetChannel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetChannel Get an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerChannelResponse> ChannelManagerGetChannelAsync(ChannelmanagerGetChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> localVarResponse = await ChannelManagerGetChannelWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetChannel Get an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse>> ChannelManagerGetChannelWithHttpInfoAsync(ChannelmanagerGetChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetChannel");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerChannelResponse>("/channelmanager.ChannelManager/GetChannel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetChannelWithAssociations Get an existing channel with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponseWithAssociations</returns>
        public ChannelmanagerChannelResponseWithAssociations ChannelManagerGetChannelWithAssociations(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponseWithAssociations> localVarResponse = ChannelManagerGetChannelWithAssociationsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetChannelWithAssociations Get an existing channel with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponseWithAssociations</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerChannelResponseWithAssociations> ChannelManagerGetChannelWithAssociationsWithHttpInfo(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetChannelWithAssociations");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetChannelWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerChannelResponseWithAssociations>("/channelmanager.ChannelManager/GetChannelWithAssociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetChannelWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetChannelWithAssociations Get an existing channel with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponseWithAssociations</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerChannelResponseWithAssociations> ChannelManagerGetChannelWithAssociationsAsync(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponseWithAssociations> localVarResponse = await ChannelManagerGetChannelWithAssociationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetChannelWithAssociations Get an existing channel with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponseWithAssociations)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerChannelResponseWithAssociations>> ChannelManagerGetChannelWithAssociationsWithHttpInfoAsync(ChannelmanagerGetChannelWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetChannelWithAssociations");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetChannelWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerChannelResponseWithAssociations>("/channelmanager.ChannelManager/GetChannelWithAssociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetChannelWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMarket Get an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponse</returns>
        public ChannelmanagerMarketResponse ChannelManagerGetMarket(ChannelmanagerGetMarketRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> localVarResponse = ChannelManagerGetMarketWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMarket Get an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> ChannelManagerGetMarketWithHttpInfo(ChannelmanagerGetMarketRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetMarket");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerMarketResponse>("/channelmanager.ChannelManager/GetMarket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMarket Get an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerMarketResponse> ChannelManagerGetMarketAsync(ChannelmanagerGetMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> localVarResponse = await ChannelManagerGetMarketWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMarket Get an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse>> ChannelManagerGetMarketWithHttpInfoAsync(ChannelmanagerGetMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetMarket");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerMarketResponse>("/channelmanager.ChannelManager/GetMarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMarketWithAssociations Get an existing market with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponseWithAssociations</returns>
        public ChannelmanagerMarketResponseWithAssociations ChannelManagerGetMarketWithAssociations(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponseWithAssociations> localVarResponse = ChannelManagerGetMarketWithAssociationsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMarketWithAssociations Get an existing market with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponseWithAssociations</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerMarketResponseWithAssociations> ChannelManagerGetMarketWithAssociationsWithHttpInfo(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetMarketWithAssociations");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetMarketWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerMarketResponseWithAssociations>("/channelmanager.ChannelManager/GetMarketWithAssociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetMarketWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMarketWithAssociations Get an existing market with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponseWithAssociations</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerMarketResponseWithAssociations> ChannelManagerGetMarketWithAssociationsAsync(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponseWithAssociations> localVarResponse = await ChannelManagerGetMarketWithAssociationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMarketWithAssociations Get an existing market with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponseWithAssociations)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerMarketResponseWithAssociations>> ChannelManagerGetMarketWithAssociationsWithHttpInfoAsync(ChannelmanagerGetMarketWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerGetMarketWithAssociations");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerGetMarketWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerMarketResponseWithAssociations>("/channelmanager.ChannelManager/GetMarketWithAssociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerGetMarketWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListChannels List all channels
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListChannelsResponse</returns>
        public ChannelmanagerListChannelsResponse ChannelManagerListChannels(ChannelmanagerListChannelsRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListChannelsResponse> localVarResponse = ChannelManagerListChannelsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListChannels List all channels
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListChannelsResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerListChannelsResponse> ChannelManagerListChannelsWithHttpInfo(ChannelmanagerListChannelsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListChannels");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListChannels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerListChannelsResponse>("/channelmanager.ChannelManager/ListChannels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListChannels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListChannels List all channels
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListChannelsResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerListChannelsResponse> ChannelManagerListChannelsAsync(ChannelmanagerListChannelsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListChannelsResponse> localVarResponse = await ChannelManagerListChannelsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListChannels List all channels
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListChannelsResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerListChannelsResponse>> ChannelManagerListChannelsWithHttpInfoAsync(ChannelmanagerListChannelsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListChannels");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListChannels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerListChannelsResponse>("/channelmanager.ChannelManager/ListChannels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListChannels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListChannelsWithAssociations List all channels with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListChannelsWithAssociationsResponse</returns>
        public ChannelmanagerListChannelsWithAssociationsResponse ChannelManagerListChannelsWithAssociations(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse> localVarResponse = ChannelManagerListChannelsWithAssociationsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListChannelsWithAssociations List all channels with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListChannelsWithAssociationsResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse> ChannelManagerListChannelsWithAssociationsWithHttpInfo(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListChannelsWithAssociations");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListChannelsWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerListChannelsWithAssociationsResponse>("/channelmanager.ChannelManager/ListChannelsWithAssociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListChannelsWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListChannelsWithAssociations List all channels with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListChannelsWithAssociationsResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerListChannelsWithAssociationsResponse> ChannelManagerListChannelsWithAssociationsAsync(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse> localVarResponse = await ChannelManagerListChannelsWithAssociationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListChannelsWithAssociations List all channels with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListChannelsWithAssociationsResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse>> ChannelManagerListChannelsWithAssociationsWithHttpInfoAsync(ChannelmanagerListChannelsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListChannelsWithAssociations");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListChannelsWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerListChannelsWithAssociationsResponse>("/channelmanager.ChannelManager/ListChannelsWithAssociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListChannelsWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMarkets List all markets
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListMarketsResponse</returns>
        public ChannelmanagerListMarketsResponse ChannelManagerListMarkets(ChannelmanagerListMarketsRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListMarketsResponse> localVarResponse = ChannelManagerListMarketsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMarkets List all markets
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListMarketsResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerListMarketsResponse> ChannelManagerListMarketsWithHttpInfo(ChannelmanagerListMarketsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListMarkets");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListMarkets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerListMarketsResponse>("/channelmanager.ChannelManager/ListMarkets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListMarkets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMarkets List all markets
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListMarketsResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerListMarketsResponse> ChannelManagerListMarketsAsync(ChannelmanagerListMarketsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListMarketsResponse> localVarResponse = await ChannelManagerListMarketsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMarkets List all markets
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListMarketsResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerListMarketsResponse>> ChannelManagerListMarketsWithHttpInfoAsync(ChannelmanagerListMarketsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListMarkets");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListMarkets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerListMarketsResponse>("/channelmanager.ChannelManager/ListMarkets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListMarkets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMarketsWithAssociations List all markets with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerListMarketsWithAssociationsResponse</returns>
        public ChannelmanagerListMarketsWithAssociationsResponse ChannelManagerListMarketsWithAssociations(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse> localVarResponse = ChannelManagerListMarketsWithAssociationsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMarketsWithAssociations List all markets with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerListMarketsWithAssociationsResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse> ChannelManagerListMarketsWithAssociationsWithHttpInfo(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListMarketsWithAssociations");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListMarketsWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerListMarketsWithAssociationsResponse>("/channelmanager.ChannelManager/ListMarketsWithAssociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListMarketsWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMarketsWithAssociations List all markets with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerListMarketsWithAssociationsResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerListMarketsWithAssociationsResponse> ChannelManagerListMarketsWithAssociationsAsync(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse> localVarResponse = await ChannelManagerListMarketsWithAssociationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMarketsWithAssociations List all markets with associations
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerListMarketsWithAssociationsResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse>> ChannelManagerListMarketsWithAssociationsWithHttpInfoAsync(ChannelmanagerListMarketsWithAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerListMarketsWithAssociations");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerListMarketsWithAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerListMarketsWithAssociationsResponse>("/channelmanager.ChannelManager/ListMarketsWithAssociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerListMarketsWithAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateChannel Update an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerChannelResponse</returns>
        public ChannelmanagerChannelResponse ChannelManagerUpdateChannel(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> localVarResponse = ChannelManagerUpdateChannelWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateChannel Update an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerChannelResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> ChannelManagerUpdateChannelWithHttpInfo(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerUpdateChannel");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerUpdateChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerChannelResponse>("/channelmanager.ChannelManager/UpdateChannel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerUpdateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateChannel Update an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerChannelResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerChannelResponse> ChannelManagerUpdateChannelAsync(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse> localVarResponse = await ChannelManagerUpdateChannelWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateChannel Update an existing channel
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerChannelResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerChannelResponse>> ChannelManagerUpdateChannelWithHttpInfoAsync(ChannelmanagerUpdateChannelRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerUpdateChannel");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerUpdateChannel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerChannelResponse>("/channelmanager.ChannelManager/UpdateChannel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerUpdateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateMarket Update an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChannelmanagerMarketResponse</returns>
        public ChannelmanagerMarketResponse ChannelManagerUpdateMarket(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0)
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> localVarResponse = ChannelManagerUpdateMarketWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateMarket Update an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChannelmanagerMarketResponse</returns>
        public channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> ChannelManagerUpdateMarketWithHttpInfo(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerUpdateMarket");
            }

            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerUpdateMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChannelmanagerMarketResponse>("/channelmanager.ChannelManager/UpdateMarket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerUpdateMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateMarket Update an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelmanagerMarketResponse</returns>
        public async System.Threading.Tasks.Task<ChannelmanagerMarketResponse> ChannelManagerUpdateMarketAsync(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse> localVarResponse = await ChannelManagerUpdateMarketWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateMarket Update an existing market
        /// </summary>
        /// <exception cref="channelmanager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelmanagerMarketResponse)</returns>
        public async System.Threading.Tasks.Task<channelmanager.Client.ApiResponse<ChannelmanagerMarketResponse>> ChannelManagerUpdateMarketWithHttpInfoAsync(ChannelmanagerUpdateMarketRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new channelmanager.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelManagerApi->ChannelManagerUpdateMarket");
            }


            channelmanager.Client.RequestOptions localVarRequestOptions = new channelmanager.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = channelmanager.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = channelmanager.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChannelManagerApi.ChannelManagerUpdateMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChannelmanagerMarketResponse>("/channelmanager.ChannelManager/UpdateMarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChannelManagerUpdateMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
